using Microsoft.AspNetCore.Mvc;
using RuleEngineAPI;
using RuleEngineAPI;
using System.Data;
using RuleEngineAPI;
using System.Data.SqlClient;
using static RuleEngineAPI.RuleService;
using RuleEngine.Entity;

namespace RuleEngineAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    
    public class TransactionController : ControllerBase
    {
        private readonly RuleProcessor _ruleProcessor;

        public TransactionController()
        {
            // Load sanctioned countries (can be from a database or JSON file)
            var sanctionedCountries = new List<string>
            {
                "Algeria",
"Angola",
"Bulgaria",
"Burkina Faso",
"Cameroon",
"Congo",
"Democratic Republic of the Congo",
"Cote d'Ivoire",
"Croatia",
"Cuba",
"North Korea",
"South Korea",
"Haiti",
"Iran",
"Kenya",
"Lebanon",
"Mali",
"Monaco",
"Mozambique",
"Myanmar",
"Namibia",
"Nigeria",
"Philippines",
"South Africa",
"South Sudan",
"Syrian Arab Republic",
"Tanzania",
"Venezuela",
"Vietnam",
"Yemen",
"Virgin Islands, U.S.",

            };
            // Load country list
            var countryList = new List<string>
            {
                "Afghanistan",
"Aland Islands",
"Albania",
"Algeria",
"American Samoa",
"Andorra",
"Angola",
"Anguilla",
"Antarctica",
"Antigua and Barbuda",
"Argentina",
"Armenia",
"Aruba",
"Australia",
"Austria",
"Azerbaijan",
"Bahamas",
"Bahrain",
"Bangladesh",
"Barbados",
"Belarus",
"Belgium",
"Belize",
"Benin",
"Bermuda",
"Bhutan",
"Bolivia",
"Bonaire, Sint Eustatius and Saba",
"Bosnia and Herzegovina",
"Botswana",
"Bouvet Island",
"Brazil",
"British Indian Ocean Territory (Chagos Archipelago)",
"Brunei Darussalam",
"Bulgaria",
"Burkina Faso",
"Burundi",
"Cambodia",
"Cameroon",
"Canada",
"Cape Verde",
"Cayman Islands",
"Central African Republic",
"Chad",
"Chile",
"China",
"Christmas Island",
"Cocos (Keeling) Islands",
"Colombia",
"Comoros",
"Cook Islands",
"Costa Rica",
"Cote d'Ivoire",
"Croatia",
"Cuba",
"Curacao",
"Cyprus",
"Czechia",
"Democratic Republic of the Congo",
"Denmark",
"Djibouti",
"Dominica",
"Dominican Republic",
"Ecuador",
"Egypt",
"El Salvador",
"Equatorial Guinea",
"Eritrea",
"Estonia",
"Eswatini",
"Ethiopia",
"Faroe Islands",
"Falkland Islands (Malvinas)",
"Fiji",
"Finland",
"France",
"French Guiana",
"French Polynesia",
"French Southern Territories",
"Gabon",
"Gambia",
"Georgia",
"Germany",
"Ghana",
"Gibraltar",
"Greece",
"Greenland",
"Grenada",
"Guadeloupe",
"Guam",
"Guatemala",
"Guernsey",
"Guinea",
"Guinea-Bissau",
"Guyana",
"Haiti",
"Heard Island and McDonald Islands",
"Holy See (Vatican City State)",
"Honduras",
"Hong Kong",
"Hungary",
"Iceland",
"India",
"Indonesia",
"Iran",
"Iraq",
"Ireland",
"Isle of Man",
"Israel",
"Italy",
"Jamaica",
"Japan",
"Jersey",
"Jordan",
"Kazakhstan",
"Kenya",
"Kiribati",
"Democratic People's Republic of Korea",
"Republic of Korea",
"Kuwait",
"Kyrgyz Republic",
"Lao People's Democratic Republic",
"Latvia",
"Lebanon",
"Lesotho",
"Liberia",
"Libyan Arab Jamahiriya",
"Liechtenstein",
"Lithuania",
"Luxembourg",
"Macao",
"Madagascar",
"Malawi",
"Malaysia",
"Maldives",
"Mali",
"Malta",
"Marshall Islands",
"Martinique",
"Mauritania",
"Mauritius",
"Mayotte",
"Mexico",
"Micronesia",
"Moldova",
"Monaco",
"Mongolia",
"Montenegro",
"Montserrat",
"Morocco",
"Mozambique",
"Myanmar",
"Namibia",
"Nauru",
"Nepal",
"Netherlands",
"New Caledonia",
"New Zealand",
"Nicaragua",
"Niger",
"Nigeria",
"Niue",
"Norfolk Island",
"North Macedonia",
"Northern Mariana Islands",
"Norway",
"Oman",
"Pakistan",
"Palau",
"Palestine",
"Panama",
"Papua New Guinea",
"Paraguay",
"Peru",
"Philippines",
"Pitcairn Islands",
"Poland",
"Portugal",
"Puerto Rico",
"Qatar",
"Reunion",
"Romania",
"Russian Federation",
"Rwanda",
"Saint Barthelemy",
"Saint Helena",
"Saint Kitts and Nevis",
"Saint Lucia",
"Saint Martin",
"Saint Pierre and Miquelon",
"Saint Vincent and the Grenadines",
"Samoa",
"San Marino",
"Sao Tome and Principe",
"Saudi Arabia",
"Senegal",
"Serbia",
"Seychelles",
"Sierra Leone",
"Singapore",
"Sint Maarten",
"Slovakia",
"Slovenia",
"Solomon Islands",
"Somalia",
"South Africa",
"South Georgia and the South Sandwich Islands",
"South Sudan",
"Spain",
"Sri Lanka",
"Sudan",
"Suriname",
"Svalbard & Jan Mayen Islands",
"Sweden",
"Switzerland",
"Syrian Arab Republic",
"Taiwan",
"Tajikistan",
"Tanzania",
"Thailand",
"Timor-Leste",
"Togo",
"Tokelau",
"Tonga",
"Trinidad and Tobago",
"Tunisia",
"Turkey",
"Turkmenistan",
"Turks and Caicos Islands",
"Tuvalu",
"Uganda",
"Ukraine",
"United Arab Emirates",
"United Kingdom",
"United States of America",
"United States Minor Outlying Islands",
"Uruguay",
"Uzbekistan",
"Vanuatu",
"Venezuela",
"Vietnam",
"Virgin Islands, British",
"Virgin Islands, U.S.",
"Wallis and Futuna",
"Western Sahara",
"Yemen",
"Zambia",
"Zimbabwe",

            };

            _ruleProcessor = new RuleProcessor(sanctionedCountries, countryList);
        }

        [HttpPost("flag-and-review")]
        public IActionResult FlagAndReviewTransactions([FromBody] dynamic requestBody)
        {
            if (requestBody == null || requestBody.transactions == null)
                return BadRequest("Invalid request payload.");

            var transactions = new List<Transaction>();
            try
            {
                // Deserialize transactions
                foreach (var item in requestBody.transactions)
                {
                    transactions.Add(new Transaction
                    {
                        transaction_id = (long)item.transaction_id,
                        sender_account = (string)item.sender_account,
                        sender_routing_number = (string)item.sender_routing_number,
                        sender_name = (string)item.sender_name,
                        sender_address = (string)item.sender_address,
                        receiver_account = (string)item.receiver_account,
                        receiver_routing_number = (string)item.receiver_routing_number,
                        receiver_name = (string)item.receiver_name,
                        receiver_address = (string)item.receiver_address,
                        transaction_amount = (decimal?)item.transaction_amount
                    });
                }
            }
            catch (Exception ex)
            {
                return BadRequest($"Error parsing transactions: {ex.Message}");
            }


            var (flagged, review) = _ruleProcessor.ProcessTransactions(transactions);

            return Ok(new
            {
                FlaggedTransactions = flagged,
                ReviewTransactions = review
            });
        }
    }

}


